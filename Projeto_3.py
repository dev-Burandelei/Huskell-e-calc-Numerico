# -*- coding: utf-8 -*-
"""T3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/187HJHUxwlIZVnICAfaLaAXjIfYAjglTg
"""



anos_iniciais = [[2005, 4.9], [2007, 4.8], [2009, 5.8], [2011, 5.9], [2013, 6.0], [2015, 6.5], [2017, 6.7], [2019, 6.7], [2021, 6.2], [2023, 6.3]]
anos_finais = [[2005, 4.4], [2007, 4.3], [2009, 4.6], [2011, 4.6], [2013, 4.7], [2015, 5.0], [2017, 5.2], [2019, 5.5], [2021, 5.5], [2023, 5.5]]

import numpy as np
import matplotlib.pyplot as plt

# Dados fornecidos
anos_iniciais = np.array([
    [2005, 4.9],
    [2007, 4.8],
    [2009, 5.8],
    [2011, 5.9],
    [2013, 6.0],
    [2015, 6.5],
    [2017, 6.7],
    [2019, 6.7],
    [2021, 6.2],
    [2023, 6.3]
])

# Separar os dados em x (anos) e y (valores)
x = anos_iniciais[:, 0]
y = anos_iniciais[:, 1]

# Calcular os somatórios
n = len(x)
sum_x = np.sum(x)
sum_y = np.sum(y)
sum_x2 = np.sum(x**2)
sum_xy = np.sum(x * y)

# Montar a matriz A e o vetor c
A = np.array([[sum_x2, sum_x],
              [sum_x, n]])

c = np.array([sum_xy, sum_y])

# Função para eliminação de Gauss
def gauss_elimination(A, c):
    n = len(c)
    for i in range(n):
        # Pivoteamento parcial
        max_row = np.argmax(np.abs(A[i:, i])) + i
        A[[i, max_row]] = A[[max_row, i]]
        c[[i, max_row]] = c[[max_row, i]]

        # Eliminação
        for j in range(i + 1, n):
            factor = A[j, i] / A[i, i]
            A[j, i:] -= factor * A[i, i:]
            c[j] -= factor * c[i]

    # Substituição regressiva
    v = np.zeros(n)
    for i in range(n - 1, -1, -1):
        v[i] = (c[i] - np.dot(A[i, i + 1:], v[i + 1:])) / A[i, i]

    return v

# Resolver o sistema linear para obter a e b
a, b = gauss_elimination(A, c)

# Resultados
print(f"Coeficiente a (inclinação): {a}")
print(f"Coeficiente b (intercepto): {b}")

print(x)
print(y)

# Plotar os dados e a reta ajustada
plt.scatter(x, y, color='blue', label='Dados originais')
plt.plot(x, a * x + b, color='red', label='Reta ajustada')

# Configurar o gráfico
plt.title('Ajuste de Curva pelo Método dos Quadrados Mínimos')
plt.xlabel('Ano')
plt.ylabel('Valor')
plt.legend()
plt.grid(True)
plt.show()

# Para prever o valor para um ano específico:
ano_previsao = 2025
y_previsao = a * ano_previsao + b
print(f"Valor previsto para {ano_previsao}: {y_previsao:.2f}")

print(a)
print(b)
nota_meta = 6.8
c = nota_meta - b
print(c)

# Dado que y = 6,8, resolvemos para x:
nota_meta = 6.8

# Encontrar o ano em que a nota 6,8 será atingida
ano_meta = (nota_meta - b) / a

print(f"A meta de nota 6,8 poderá ser atingida aproximadamente no ano de {ano_meta:.0f}.")





anos_finais = np.array([
    [2005, 4.4],
    [2007, 4.3],
    [2009, 4.6],
    [2011, 4.6],
    [2013, 4.7],
    [2015, 5.0],
    [2017, 5.2],
    [2019, 5.5],
    [2021, 5.5],
    [2023, 5.5]
])

# Separar os dados em w (anos) e z (valores)
w = anos_finais[:, 0]
z = anos_finais[:, 1]

# Calcular os somatórios
n = len(w)
sum_w = np.sum(w)
sum_z = np.sum(z)
sum_w2 = np.sum(w**2)
sum_wz = np.sum(w * z)

# Montar a matriz A_2 e o vetor c_2
A_2 = np.array([[sum_w2, sum_w],
              [sum_w, n]])

c_2 = np.array([sum_wz, sum_z])
# Resolver o sistema linear para obter a e b
a_2, b_2 = gauss_elimination(A_2, c_2)

# Resultados
print(f"Coeficiente a_2 (inclinação): {a_2}")
print(f"Coeficiente b_2 (intercepto): {b_2}")

# Plotar os dados e a reta ajustada
plt.scatter(w, z, color='blue', label='Dados originais')
plt.plot(w, a_2 * w + b_2, color='red', label='Reta ajustada')

# Configurar o gráfico
plt.title('Ajuste de Curva pelo Método dos Quadrados Mínimos')
plt.xlabel('Ano')
plt.ylabel('Nota')
plt.legend()
plt.grid(True)
plt.show()

# Para prever o valor para um ano específico:
ano_previsao = 2025
z_previsao = a_2 * ano_previsao + b_2
print(f"Valor previsto para {ano_previsao}: {y_previsao:.2f}")

# Nota alvo para 2021 e 2023
nota_meta_2021 = 6.0
nota_meta_2023 = 6.3

# Calcular os anos em que as notas serão atingidas
ano_meta_2021 = (nota_meta_2021 - b_2) / a_2
ano_meta_2023 = (nota_meta_2023 - b_2) / a_2

print(f"A meta de nota 6,0 poderá ser atingida aproximadamente no ano de {ano_meta_2021:.0f}.")
print(f"A meta de nota 6,3 poderá ser atingida aproximadamente no ano de {ano_meta_2023:.0f}.")

